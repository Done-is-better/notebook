<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="1.7 事件处理">
  <outline text="1.7.1 事件的基本使用" _note="&gt; 1.  事件的回调需要配置在methods 对象中，最终会在vm上。&#10;&gt;&#10;&gt; 2.  methods中的配置函数，不要用箭头函数，否则this就不是vm了。&#10;&gt;&#10;&gt; 3.  methods中配置的函数，都是被Vue管理的，this的指向是vm或者组件实例对象。&#10;&gt;&#10;&gt; 4.  @click=&quot;demo&quot;和@click=&quot;demo($event)&quot;效果一致，但后者可以传参。&#10;&#10;![](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211212170913990.png)">
  </outline>
  <outline text="1.7.2 事件修饰符" _note="&gt; **Vue 中的事件修饰符：**&#10;&gt;&#10;&gt; 1.  prevent:阻止默认事件&#10;&gt;&#10;&gt; 2.  stop:阻止事件冒泡&#10;&gt;&#10;&gt; 3.  once:事件只触发一次&#10;&gt;&#10;&gt; 4.  capture:使用事件的捕获模式&#10;&gt;&#10;&gt; 5.  self:只有event.target 是当前操作的元素时才触发事件&#10;&gt;&#10;&gt; 6.  passive:事件的默认行为立即执行，无需等待事件回调执行完毕&#10;&#10;    //prevent&#10;    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;a href=&quot;http://www.baidu.com&quot; @click=&quot;showInfo&quot;&gt;switch to&lt;/a&gt; //默认行为：跳转&#10;            &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;prevent switching to&lt;/a&gt; //事件修饰符方式 阻止默认行为&#10;            &lt;a href=&quot;http://www.baidu.com&quot; @click=&quot;showInfo2&quot;&gt;prevent switching to&lt;/a&gt; //js中阻止默认行为的方法&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el:&quot;#root&quot;,&#10;                methods:{&#10;                    showInfo(){&#10;                        alert(&quot;hello&quot;);&#10;                    },&#10;                    showInfo2(event){&#10;                        event.preventDefault(); //阻止默认行为&#10;                        alert(&quot;hello&quot;);&#10;                    }&#10;                }&#10;            })&#10;        &lt;/script&gt;&#10;&#10;    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;div @click=&quot;showInfo&quot;&gt;&#10;                &lt;button @click=&quot;showInfo&quot;&gt;click&lt;/button&gt;&lt;!--stopPropagation方式阻止事件冒泡--&gt;&#10;                &lt;button @click.stop=&quot;showInfo&quot;&gt;click&lt;/button&gt;&lt;!--事件修饰符阻止事件冒泡--&gt;&#10;                &#10;            &lt;/div&gt;&#10;            &lt;button @click.once=&quot;showInfo&quot;&gt;once &lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el:&quot;#root&quot;,&#10;                methods:{&#10;                    showInfo(event){&#10;                        //event.stopPropagation(); //js中阻止事件冒泡&#10;                        alert(&quot;hello&quot;);&#10;                    }&#10;                }&#10;            })&#10;        &lt;/script&gt;">
  </outline>
  <outline text="1.7.3 键盘事件" _note="&gt; **Vue 中常用的按键别名**&#10;&gt;&#10;&gt; ![](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211212192345626.png)&#10;&gt;&#10;&gt; tab:必须配合keydown使用&#10;&gt;&#10;&gt; **系统修饰建 ctrl/alt/shift/meta**&#10;&gt;&#10;&gt; 1.  配合keyup使用：按下修饰键的同时，再按下其他件，释放其他键后，事件才触发&#10;&gt;&#10;&gt; 2.  配合keydown使用：正常触发事件&#10;&gt;&#10;&gt; **自定义别名**&#10;&gt;&#10;&gt;     Vue.config.keyCodes.自定义别名 = 键码">
  </outline>
</outline>
<outline text="1.8 计算属性" _note="&gt; get调用的时机:1. 初次读取时，2. 依赖的数据发生变化时&#10;&#10;     &lt;div id=&quot;root&quot;&gt;&#10;            &lt;input type=&quot;text&quot; placeholder=&quot;simon&quot; v-model=&quot;firstName&quot;/&gt;&#10;            &lt;inupt type=&quot;text&quot; plcaeholder=&quot;kerola&quot; v-model=&quot;lastName&quot;/&gt;&#10;            {{fullName}}&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;           var vm =  new Vue({&#10;                el:&quot;#root&quot;,&#10;                data:{&#10;                    firstName:&quot;simon&quot;,&#10;                    lastName:&quot;kerola&quot;&#10;                },&#10;                computed:{&#10;                    fullName:{&#10;                        get(){&#10;                            return this.firstName+&quot;-&quot;+this.lastName;&#10;                        },&#10;                        set(value){&#10;                            const str = value.split(&quot;-&quot;);&#10;                            this.firstName=str[0];&#10;                            this.lastName = str[1];&#10;                            return this.firstName+&quot;-&quot;+this.lastName;&#10;                        }&#10;                    }&#10;                }&#10;            })&#10;        &lt;/script&gt;&#10;&#10;&gt; **原理**&#10;&gt;&#10;&gt; 底层借助了Object.defineproperty 方法提供的getter和setter&#10;&gt;&#10;&gt; **优势**&#10;&gt;&#10;&gt; 与methods相比，内部有缓存机制，效率更高">
</outline>
<outline text="1.9 监视属性" _note="&gt; Vue 中的watch&#10;&gt; 默认不监视对象内部值的改变，配置deep:true可以监视对象内部值的改变&#10;&#10;    &lt;script&gt;&#10;            var vm = new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    value: true,&#10;                    numbers: {&#10;                        num1: 2,&#10;                        num2: 1&#10;                    }&#10;                },&#10;                methods: {&#10;                    fun() {&#10;                        this.value = !this.value&#10;                    },&#10;                    fun2() {&#10;                        this.numbers.num1++;&#10;                        this.numbers.num2++;&#10;                    }&#10;                },&#10;                watch: {&#10;                    value: {&#10;                        handler(newValue, oldValue) {&#10;                            console.log(newValue, oldValue);&#10;                        },&#10;                        immediate: true, //初始化时先执行一次,&#10;&#10;                    },&#10;                    //多层级监视&#10;                    /* 'numbers.num1': {&#10;                        handler(newVal, oldVal) {&#10;                            console.log(newVal, oldVal);&#10;                        }&#10;                    } */&#10;                    //深度监视&#10;                    numbers: {&#10;                        deep: true,&#10;                        handler(newV, oldV) {&#10;                            console.log(newV, oldV);&#10;                        }&#10;                    }&#10;                }&#10;            })&#10;        &lt;/script&gt;&#10;&#10;&gt; **computed 和watch的区别**&#10;&gt;&#10;&gt; 1.  computed能完成的功能，watch都可以完成&#10;&gt;&#10;&gt; 2.  watch能完成的功能,computed不一定能完成，如watch可以进行异步操作&#10;&gt;&#10;&gt; **注意**&#10;&gt;&#10;&gt; 1.  被Vue管理的函数，要写成普通函数，这样this 的指向才是vm 或组件实例&#10;&gt;&#10;&gt; 2.  所有不被Vue管理的函数，最好写成箭头函数，这样this的指向才是vm或组件实例对象">
</outline>
<outline text="1.10 条件渲染" _note="&gt; v-show 通过控制display 属性显示或不显示&#10;&gt;&#10;&gt; v-if 为false时，页面不渲染&#10;&#10;    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;p v-show=&quot;isShow&quot;&gt;{{value}}&lt;/p&gt;&#10;            &lt;p v-if=&quot;isShow&quot;&gt;{{value}}&lt;/p&gt;&#10;            &lt;p v-else&gt;{{value}}&lt;/p&gt;&#10;            &lt;button @click=&quot;show&quot;&gt;click&lt;/button&gt;&#10;            &lt;template v-if=&quot;isShow&quot;&gt;&#10;                &lt;p&gt;hello&lt;/p&gt;&#10;            &lt;/template&gt;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    value: &quot;hello&quot;,&#10;                    isShow: true&#10;                },&#10;                methods: {&#10;                    show() {&#10;                        this.isShow = !this.isShow;&#10;                    }&#10;                },&#10;                watch: {&#10;                    isShow: {&#10;                        handler() {&#10;                            this.value = &quot;hello!!!&quot;&#10;                        }&#10;                    }&#10;                }&#10;&#10;            })&#10;        &lt;/script&gt;&#10;&#10;&gt; template 只能配合v-if 使用">
</outline>
<outline text="1.11 列表渲染" _note="    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;ul&gt;&#10;                &lt;li v-for=&quot;(p,index) in persons&quot; :key=&quot;index&quot;&gt;&#10;                    {{p.id}} : {{p.name}}&#10;                &lt;/li&gt;&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    persons: [{&#10;                        id: 1,&#10;                        name: &quot;chandler&quot;,&#10;                        age: 12&#10;                    }, {&#10;                        id: 2,&#10;                        name: &quot;tom&quot;,&#10;                        age: 12&#10;                    }, {&#10;                        id: 3,&#10;                        name: &quot;kafka&quot;,&#10;                        age: 11&#10;                    }]&#10;                }&#10;            })&#10;        &lt;/script&gt;">
  <outline text="1.11.2 v-for 中的key" _note="&gt; **作用**&#10;&gt;&#10;&gt; key&#10;&gt; 是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据新数据生成新的虚拟DOM，随后vue会进行diff&#10;&gt;&#10;&gt; 最好选择数据中唯一标识作为key">
  </outline>
  <outline text="1.11.3 列表过滤" _note="     &lt;script&gt;&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    persons: [{&#10;                        id: 1,&#10;                        name: &quot;张三&quot;,&#10;                        sex: &quot;男&quot;&#10;                    }, {&#10;                        id: 2,&#10;                        name: &quot;李四&quot;,&#10;                        sex: &quot;男&quot;&#10;                    }, {&#10;                        id: 3,&#10;                        name: &quot;王三&quot;,&#10;                        sex: &quot;男&quot;&#10;                    }, {&#10;                        id: 4,&#10;                        name: &quot;赵四&quot;,&#10;                        sex: &quot;男&quot;&#10;                    }],&#10;                    filterPerson: [],&#10;                    str: &quot;&quot;,&#10;                    keyWord: &quot;&quot;&#10;                },&#10;                /*  watch: {&#10;                     str: {&#10;                         handler(val) {&#10;                             this.filterPerson = this.persons.filter((p) =&gt; {&#10;                                 return p.name.indexOf(val) != -1;&#10;                             })&#10;                         },&#10;                         immediate: true&#10;                     },&#10;&#10;                 }, */&#10;                computed: {&#10;                    personList() {&#10;                        return this.persons.filter((p) =&gt; {&#10;                            return p.name.indexOf(this.keyWord) != -1;&#10;                        })&#10;                    }&#10;                }&#10;            })&#10;        &lt;/script&gt;">
  </outline>
  <outline text="1.11.4 列表排序" _note="    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;input type=&quot;text&quot; v-model=&quot;keyWord&quot; /&gt;&lt;br/&gt;&#10;            &lt;button @click=&quot;sortType=0&quot;&gt;原顺序&lt;/button&gt;&#10;            &lt;button @click=&quot;sortType=1&quot;&gt;升序&lt;/button&gt;&#10;            &lt;button @click=&quot;sortType=2&quot;&gt;降序&lt;/button&gt;&#10;            &lt;ul&gt;&#10;                &lt;li v-for=&quot;(p,index) in perList&quot; :key=&quot;p.id&quot;&gt;&#10;                    {{p.name}} ---- {{p.sex}} ---- {{p.age}}&#10;                &lt;/li&gt;&#10;            &lt;/ul&gt;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    persons: [{&#10;                        id: 1,&#10;                        name: &quot;张三&quot;,&#10;                        sex: &quot;male&quot;,&#10;                        age: 44&#10;                    }, {&#10;                        id: 2,&#10;                        name: &quot;李四&quot;,&#10;                        sex: &quot;female&quot;,&#10;                        age: 12&#10;                    }, {&#10;                        id: 3,&#10;                        name: &quot;王三&quot;,&#10;                        sex: &quot;male&quot;,&#10;                        age: 23&#10;                    }, {&#10;                        id: 4,&#10;                        name: &quot;赵六&quot;,&#10;                        sex: &quot;female&quot;,&#10;                        age: 11&#10;                    }],&#10;                    keyWord: &quot;&quot;,&#10;                    sortType: 0&#10;                },&#10;                computed: {&#10;                    perList() {&#10;                        var list = this.persons.filter((p) =&gt; {&#10;                            return p.name.indexOf(this.keyWord) != -1;&#10;                        });&#10;                        if (this.sortType) {&#10;                            list.sort((p1, p2) =&gt; {&#10;                                return this.sortType == 1 ? p1.age - p2.age : p2.age - p1.age;&#10;                            })&#10;                        }&#10;                        return list;&#10;                    }&#10;                }&#10;            });&#10;        &lt;/script&gt;">
  </outline>
  <outline text="1.11.5 收集表单数据" _note="&gt; ![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211213193025741.png)">
  </outline>
</outline>
<outline text="1.12 过滤器" _note="&gt; 用于对要显示的数据进行特定格式化后再显示&#10;&gt;&#10;&gt; 使用：1. 差值语法 2. v-bind&#10;&#10;    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;p&gt;{{time | timeFormatter}}&lt;/p&gt;&#10;            &lt;p&gt;{{time | timeFormatter(&quot;YY-MM-DD&quot;)}}&lt;/p&gt;&#10;            &lt;p&gt;{{time | myFilter}}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            Vue.filter(&quot;myFilter&quot;, function(value) {&#10;                return value.toString().substring(0, 4);&#10;            });&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    time: Date.now()&#10;                },&#10;                //局部过滤器&#10;                filters: {&#10;                    timeFormatter(value, pattern = &quot;YYYY-MM-DD HH:mm:ss&quot;) { //小技巧: 设置默认格式&#10;                        return dayjs(value).format(pattern);&#10;                    }&#10;                }&#10;            });&#10;        &lt;/script&gt;">
</outline>
<outline text="1.13 常见内置指令" _note="&gt; **v-cloak/**&#10;&gt;&#10;&gt; 1.  是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉该属性&#10;&gt;&#10;&gt; 2.  配合css使用可以解决网速慢时页面展示出{{xx}}的问题&#10;&gt;&#10;&gt; **v-pre**&#10;&gt;&#10;&gt; 1.  跳过其所在节点的编译过程&#10;&gt;&#10;&gt; 2.  可跳过：没有使用指令的语法、没有使用插值语法的节点，加快编译">
</outline>
<outline text="1.14 自定义指令">
  <outline text="1.14.1 函数式" _note="    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;p v-multiply=&quot;num&quot;&gt;&lt;/p&gt;&#10;            &lt;button @click=&quot;num++&quot;&gt;click&lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    num: 10&#10;                },&#10;                directives: {&#10;                    multiply(element, binding) {&#10;                        element.innerHTML = binding.value * 10;&#10;                    }&#10;                }&#10;            })&#10;        &lt;/script&gt;">
  </outline>
  <outline text="1.14.2 对象式" _note="    &lt;div id=&quot;app&quot;&gt;&#10;            &lt;input type=&quot;text&quot; v-fbind/&gt;&#10;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el: &quot;#app&quot;,&#10;                data: {&#10;                    num: 10&#10;                },&#10;                directives: {&#10;                    fbind: {&#10;                        //指令与元素绑定时调用&#10;                        bind(element, binding) {&#10;                            element.value = binding.value;&#10;                        },&#10;                        //指令所在元素被插入页面时调用&#10;                        inserted(element, binding) {&#10;                            element.focus();&#10;                        },&#10;                        //指令所在元素被重新解析&#10;                        update() {&#10;                            element.value = binding.value;&#10;                        }&#10;                    }&#10;                }&#10;            })&#10;        &lt;/script&gt;">
  </outline>
</outline>
<outline text="1.15 生命周期" _note="    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;h2 :style=&quot;{opacity:opacity}&quot;&gt;{{opacity}}&lt;/h2&gt;&#10;        &lt;/div&gt;&#10;        &lt;script&gt;&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                data: {&#10;                    opacity: 1&#10;                },&#10;                mounted() {&#10;                    setInterval(() =&gt; {&#10;                        this.opacity -= 0.01;&#10;                        if (this.opacity &lt;= 0) {&#10;                            this.opacity = 1;&#10;                        }&#10;                    }, 20)&#10;                }&#10;            })&#10;        &lt;/script&gt;&#10;&#10;&gt; 生命周期函数中的this指向是vm 或组件实例对象&#10;&#10;&gt; mounted ： 发送ajax请求，启动定时器，绑定自定义事件，订阅消息&#10;&gt;&#10;&gt; beforeDestory :清除定时器，解绑自定义事件，取消订阅消息等&#10;&gt;&#10;&gt; 一般不会在beforeDestroy 中操作数据，即使操作数据也不会触发更新流程">
</outline>
<outline text="1.16组件" _note="    &lt;div id=&quot;root&quot;&gt;&#10;            &lt;school&gt;&lt;/school&gt;&#10;            &lt;my-student&gt;&lt;/my-student&gt;&#10;            &lt;global&gt;&lt;/global&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;script&gt;&#10;            var school = Vue.extend({&#10;                // `&#10;                template: `&lt;div&gt;  &#10;                            &lt;p&gt;{{name}}&lt;/p&gt;&#10;                            &lt;p&gt;{{address}}&lt;/p&gt;&#10;                        &lt;/div&gt;`,&#10;                data() {&#10;                    return {&#10;                        name: &quot;sjzm&quot;,&#10;                        address: &quot;xxxx&quot;&#10;                    }&#10;                }&#10;            });&#10;            var student = Vue.extend({&#10;                template: `&lt;div&gt;&#10;            &lt;p&gt;{{name}}&lt;/p&gt;&#10;            &lt;p&gt;{{sex}}&lt;/p&gt;&#10;        &lt;/div&gt;`,&#10;                data() {&#10;                    return {&#10;                        name: &quot;chandler&quot;,&#10;                        sex: &quot;male&quot;&#10;                    }&#10;                }&#10;            })&#10;            var global = Vue.extend({&#10;                    template: `&lt;div&gt;&#10;                        &lt;p&gt;HELLO&lt;/p&gt;&#10;                    &lt;/div&gt;`,&#10;                })&#10;                //全局组件&#10;            Vue.component(&quot;global&quot;, global);&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                components: {&#10;                    // student: student,&#10;                    'my-student': student,&#10;                    school&#10;                }&#10;            })&#10;        &lt;/script&gt;">
  <outline text="1.16.1 组件的嵌套" _note="    var student = Vue.extend({&#10;                template: `&lt;div&gt;&#10;                    student&#10;                    &lt;/div&gt;`,&#10;&#10;            })&#10;            var school = Vue.extend({&#10;                template: `&lt;div&gt;&#10;                    {{name}}&#10;                    &lt;br/&gt;&#10;                    &lt;student&gt;&lt;/student&gt;&#10;                    &lt;/div&gt;`,&#10;                data() {&#10;                    return {&#10;                        name: &quot;name2&quot;&#10;                    }&#10;                },&#10;                components: {&#10;                    student: student&#10;                }&#10;            })&#10;            var hello = Vue.extend({&#10;                template: `&lt;div&gt;HELLO&lt;/div&gt;`&#10;            })&#10;&#10;            var app = Vue.extend({&#10;                template: `&lt;div&gt;&#10;                    &lt;h1&gt;{{name}}&lt;/h1&gt;&#10;                    &lt;school&gt;&lt;/school&gt;&#10;                    &lt;hello&gt;&lt;/hello&gt;&#10;                    &lt;/div&gt;`,&#10;                data() {&#10;                    return {&#10;                        name: &quot;name1&quot;&#10;                    }&#10;                },&#10;                components: {&#10;                    school: school,&#10;                    hello: hello&#10;                }&#10;            })&#10;            new Vue({&#10;                el: &quot;#root&quot;,&#10;                components: {&#10;                    app&#10;                }&#10;&#10;            })&#10;        &lt;/script&gt;">
  </outline>
  <outline text="1.16.2 VueComponent构造函数" _note="&gt; 每次调用Vue.extend ,返回的都是一个全新的 VueComponent&#10;&gt;&#10;&gt; **this的指向**&#10;&gt;&#10;&gt; 组件配置：&#10;&gt;&#10;&gt; 1.  data函数，methods中的函数，watch中的函数，computed中的函数&#10;&gt;     this都是VueComponent 实例对象&#10;&gt;&#10;&gt;     new Vue():&#10;&gt;&#10;&gt;     data函数，methods中的函数，watch中的函数，computed中的函数&#10;&gt;     this都是Vue实例对象&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211215154719484.png)&#10;&#10;&gt; **内置关系**&#10;&gt;&#10;&gt; VueComponent.prototype.\_\_proto\_\_ === Vue.prototype&#10;&gt;&#10;&gt; 让组件的实例对象可以访问到Vue原型上的方法、属性">
  </outline>
</outline>
<outline text="单文件组件" _note="&gt; **ES6模块化，暴露组件**&#10;&gt;&#10;&gt;     //分别暴露&#10;&gt;     export const xxx = ...&#10;&gt;     //默认暴露&#10;&gt;     const xxx = ...&#10;&gt;     export default xxx&#10;&gt;     //统一暴露&#10;&gt;     export {xxx}&#10;&#10;&gt; **打包默认配置**&#10;&gt;&#10;&gt;     vue inspect &gt; xxx.js">
  <outline text="ref属性" _note="&gt; 1.  用来给元素或子组件注册引用信息&#10;&gt;&#10;&gt; 2.  在html标签上获取的是真实的DOM元素，在组件上是组件实例对象&#10;&gt;&#10;&gt; 3.  获取： this.$refs.xxx&#10;&#10;    &lt;template&gt;&#10;      &lt;div&gt;&#10;          &lt;p ref=&quot;p&quot;&gt;&lt;/p&gt;&#10;          &lt;Student ref=&quot;stud&quot;&gt;&lt;/Student&gt;&#10;          &lt;School&gt;&lt;/School&gt;&#10;          &lt;button @click=&quot;fun&quot;&gt;click&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    import School from &quot;./components/School.vue&quot;;&#10;    import Student from &quot;./components/Student.vue&quot;&#10;    export default {&#10;        components:{&#10;            School,&#10;            Student&#10;        },&#10;        methods:{&#10;            fun(){&#10;                console.log(&quot;$refs.p&quot;,this.$refs.p);&#10;                console.log(&quot;$ref.stud&quot;,this.$refs.stud);&#10;            }&#10;        }&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;&#10;    &lt;/style&gt;">
  </outline>
  <outline text="props属性" _note="    //User.vue&#10;    &lt;template&gt;&#10;      &lt;div&gt;&#10;        &lt;h2&gt;{{msg}}&lt;/h2&gt;    &#10;        &lt;p&gt;{{name}}&lt;/p&gt;&#10;        &lt;p&gt;{{age+1}}&lt;/p&gt;&#10;        &lt;p&gt;{{sex}}&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    export default {&#10;        data(){&#10;            return {&#10;                msg:&quot;主题&quot;&#10;            }&#10;        },&#10;        //简单声明接收&#10;        // props:[&quot;name&quot;,&quot;age&quot;,&quot;sex&quot;]&#10;&#10;        //接受的同时对数据进行限制&#10;        /* props:{&#10;            name:String,&#10;            age:Number,&#10;            sex:String&#10;        } */&#10;        //接收时对数据类型、必要性、默认值的限制&#10;        props:{&#10;            name:{&#10;                type:String,&#10;                required:true&#10;            },&#10;            age:{&#10;                type:Number,&#10;                required:true&#10;            },&#10;            sex:{&#10;                type:String,&#10;                default:&quot;male&quot;&#10;            }&#10;        }&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;&#10;    //App.vue&#10;    &lt;template&gt;&#10;      &lt;div&gt;&#10;        &lt;user  name=&quot;chandler&quot;  :age=&quot;12&quot; &gt;&lt;/user&gt;&#10;&#10;        &#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;&#10;    import User from &quot;./components/User&quot;&#10;    export default {&#10;&#10;        components:{&#10;            User&#10;        }&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;&gt; vue低层会监视&#10;&gt; 对props的修改，如果需要修改，可以复制一份到data,对data中的属性进行修改">
  </outline>
  <outline text="mixin" _note="    //mixin.js&#10;    export const mixin = {&#10;        methods: {&#10;            fun() {&#10;                console.log(this);&#10;            }&#10;        }&#10;    }&#10;&#10;    //xx.vue&#10;    &lt;script&gt;&#10;    import {mixin} from &quot;../mixin&quot;&#10;    export default {&#10;        data(){&#10;            return {&#10;                name:&quot;chandler&quot;,&#10;                &#10;            }&#10;        },&#10;       mixins:[mixin]&#10;    }&#10;    &lt;/script&gt;">
  </outline>
  <outline text="插件" _note="    //plugins.js&#10;    export default {&#10;        install(Vue) {&#10;            Vue.filter(&quot;slice&quot;, function(value) {&#10;                return value.slice(0, 3);&#10;            });&#10;            Vue.directive(&quot;fbind&quot;, function(element, binding) {&#10;                element.focus();&#10;                element.value = binding.value * 2;&#10;            });&#10;            Vue.mixin({&#10;                methods: {&#10;                    showThis() {&#10;                        console.log(this);&#10;                    }&#10;                }&#10;            });&#10;            //给Vue原型上添加一个方法，vm和vc都能使用&#10;            Vue.prototype.hello = () =&gt; console.log(&quot;hello&quot;);&#10;        }&#10;    }&#10;&#10;    //使用&#10;    import xxx from &quot;..&quot;&#10;    Vue.use(xxx)">
  </outline>
  <outline text="本地存储" _note="&gt; 存储：localStorage.setItem(&quot;str&quot;,&quot;str)&#10;&gt;&#10;&gt; 读取：localStorage.getItem(&quot;str&quot;)&#10;&gt;&#10;&gt; 清除：localStorage.removeItem(&quot;str&quot;)&#10;&gt;&#10;&gt; 清空：localStorage.clear()&#10;&gt;&#10;&gt; **sessionStorage** 也有上面四个api&#10;&#10;&gt; vue init webpack-simple xxx&#10;&gt;&#10;&gt; vue create xxx">
  </outline>
  <outline text="组件自定义事件" _note="    //注册自定义事件&#10;    methods:{&#10;            sendStudentMsg(){&#10;                this.$emit(&quot;atguigu&quot;,this.name,this.age);&#10;            },&#10;    //解绑&#10;            unbind(){&#10;                this.$off(&quot;atguigu&quot;);&#10;            }&#10;        }&#10;    //父组件绑定&#10;    &lt;student @atguigu=&quot;getStudentMsg&quot;/&gt;&#10;&#10;    //父组件绑定&#10;    &lt;student ref=&quot;student&quot;/&gt;&#10;    mounted(){&#10;        this.$refs.student.$on(&quot;atguigu&quot;,this.getStudentMsg);&#10;      }&#10;&#10;    =====绑定多个事件，解绑多个事件=====&#10;    sendStudentMsg(){&#10;                this.$emit(&quot;atguigu&quot;,this.name,this.age);&#10;                this.$emit(&quot;demo&quot;)&#10;            },&#10;            unbind(){&#10;                this.$off([&quot;atguigu&quot;,&quot;demo&quot;]);&#10;            }">
  </outline>
</outline>
<outline text="全局事件总线" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211217105820970.png)">
</outline>
<outline text="订阅与发布" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211217124510366.png)">
  <outline text="具名插槽" _note="    &lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt;&#10;    &lt;slot name=&quot;yyy&quot;&gt;&lt;/slot&gt;&#10;&#10;    =====&#10;    &lt;XX&gt;&#10;    	&lt;img slot=&quot;xxx&quot;/&gt;&#10;        &lt;a slot=&quot;yyy&quot;&gt;llj&lt;/a&gt;&#10;    &lt;/XX&gt;">
  </outline>
  <outline text="作用域插槽" _note="    //Games.vue&#10;    &lt;template&gt;&#10;      &lt;div id=&quot;games&quot;&gt;&#10;          &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    export default {&#10;        name:&quot;Games&quot;,&#10;        data(){&#10;            return {&#10;                games:{&#10;                    game1:&quot;Naroka&quot;,&#10;                    game2:&quot;穿越火线&quot;,&#10;                    game3:&quot;红警&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    //App.vue&#10;    &lt;template&gt;&#10;      &lt;div id=&quot;app&quot;&gt;&#10;        &lt;games&gt;&#10;          &lt;template slot-scope=&quot;atguigu&quot;&gt;&#10;            &lt;ol&gt;&#10;              &lt;li v-for=&quot;game in atguigu.games&quot; :key=&quot;game&quot;&gt;{{game}}&lt;/li&gt;&#10;            &lt;/ol&gt;&#10;          &lt;/template&gt;&#10;        &lt;/games&gt;&#10;        &lt;games&gt;&#10;          &lt;template slot-scope=&quot;{games}&quot;&gt;&#10;            &lt;ul&gt;&#10;              &lt;li v-for=&quot;game in games&quot; :key=&quot;game&quot;&gt;{{game}}&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;          &lt;/template&gt;&#10;        &lt;/games&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    import Games from &quot;./components/Games.vue&quot;&#10;    export default {&#10;      name: 'App',&#10;      components: {&#10;        Games&#10;      }&#10;    }&#10;    &lt;/script&gt;">
  </outline>
</outline>
<outline text="Vuex 工作原理" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211219110305061.png)&#10;&#10;    //index.js&#10;    import Vuex from &quot;vuex&quot;&#10;    import Vue from &quot;vue&quot;&#10;    Vue.use(Vuex)&#10;    const actions = {&#10;        //如果业务没有网络请求和其他业务要求可以越过actions&#10;        addOdd(context, value) {&#10;            if (value % 2) {&#10;                context.commit(&quot;ADDODD&quot;, value);&#10;            }&#10;&#10;        }&#10;    }&#10;    const mutations = {&#10;        ADD(state, value) {&#10;&#10;            state.sum += value;&#10;        },&#10;        SUB(state, value) {&#10;            state.sum -= value;&#10;        },&#10;        ADDODD(state, value) {&#10;            state.sum += value;&#10;        }&#10;    }&#10;    const state = {&#10;        sum: 0,&#10;&#10;    }&#10;&#10;    export default new Vuex.Store({&#10;        actions,&#10;        mutations,&#10;        state&#10;    })&#10;&#10;    //Calculate.vue&#10;    &lt;template&gt;&#10;      &lt;div id=&quot;calculate&quot;&gt;&#10;          &lt;select v-model.number=&quot;num&quot;&gt;&#10;              &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;&#10;              &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;&#10;              &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;&#10;          &lt;/select&gt;&#10;          &lt;button @click=&quot;fun1&quot;&gt;add&lt;/button&gt;&#10;          &lt;button @click=&quot;fun2&quot;&gt;sub&lt;/button&gt;&#10;          &lt;button @click=&quot;fun3&quot;&gt;addOdd&lt;/button&gt;&#10;          &lt;p&gt;{{$store.state.sum}}&lt;/p&gt;&#10;          &#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    export default {&#10;        name:&quot;Calculate&quot;,&#10;        data(){&#10;            return {&#10;                num:0,&#10;            }&#10;        },&#10;        methods:{&#10;            fun1(){&#10;               &#10;                this.$store.commit(&quot;ADD&quot;,this.num);&#10;            },&#10;            fun2(){&#10;                this.$store.commit(&quot;SUB&quot;,this.num);&#10;            },&#10;            fun3(){&#10;                this.$store.dispatch(&quot;addOdd&quot;,this.num);&#10;            }&#10;        }&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;&#10;    &lt;/style&gt;">
  <outline text="mapState/mapGetters" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211219165553839.png)">
  </outline>
  <outline text="vuex模块化编码" _note="    //index.js&#10;    import Vuex from &quot;vuex&quot;&#10;    import Vue from &quot;vue&quot;&#10;    import CalItem from &quot;./count&quot;&#10;    import SearItem from &quot;./search&quot;&#10;    Vue.use(Vuex)&#10;&#10;    export default new Vuex.Store({&#10;        // actions,&#10;        // mutations,&#10;        // state&#10;        modules: {&#10;            CalItem,&#10;            SearItem&#10;        }&#10;    })&#10;&#10;    //count.js&#10;    export default {&#10;        namespaced: true,&#10;        actions: {&#10;            addOdd(context, value) {&#10;                if (value % 2 == 1) {&#10;                    context.commit(&quot;ADDODD&quot;, value);&#10;                }&#10;&#10;            },&#10;        },&#10;        mutations: {&#10;            ADD(state, value) {&#10;&#10;                state.sum += value;&#10;            },&#10;            SUB(state, value) {&#10;                state.sum -= value;&#10;            },&#10;            ADDODD(state, value) {&#10;                state.sum += value;&#10;            },&#10;        },&#10;        state: {&#10;            sum: 0,&#10;        }&#10;    }&#10;&#10;    //search.js&#10;    import axios from &quot;axios&quot;&#10;    export default {&#10;        namespaced: true,&#10;        actions: {&#10;            searchUsers(context, value) {&#10;                axios({&#10;                    url: `https://api.github.com/search/users?q=${value}`,&#10;                    method: &quot;GET&quot;&#10;                }).then(&#10;                    response =&gt; {&#10;                        context.commit(&quot;SEARCH_USERS&quot;, response.data);&#10;                    },&#10;                    error =&gt; {&#10;                        context.commit(&quot;ERROR&quot;, error.message);&#10;                    }&#10;                )&#10;            }&#10;        },&#10;        mutations: {&#10;            SEARCH_USERS(state, value) {&#10;                console.log(value.items);&#10;                state.result = value.items;&#10;            },&#10;            ERROR(state, value) {&#10;                state.errmsg = value;&#10;            }&#10;        },&#10;        state: {&#10;            result: [],&#10;            errmsg: &quot;&quot;&#10;        }&#10;    }&#10;&#10;    //App.vue&#10;    &lt;template&gt;&#10;      &lt;div id=&quot;app&quot;&gt;&#10;        &lt;calculate&gt;&lt;/calculate&gt;&#10;        &lt;search-users&gt;&lt;/search-users&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    import Calculate from &quot;./components/Calculate.vue&quot;&#10;    import SearchUsers from &quot;./components/SearchUsers.vue&quot;&#10;    export default {&#10;      name: 'App',&#10;      components: {&#10;        Calculate,&#10;        SearchUsers&#10;      },&#10;      &#10;    }&#10;&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;&#10;    //Calculate.vue&#10;    &lt;template&gt;&#10;      &lt;div id=&quot;calculate&quot;&gt;&#10;          &lt;select v-model.number=&quot;num&quot;&gt;&#10;              &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;&#10;              &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;&#10;              &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;&#10;          &lt;/select&gt;&#10;          &lt;!-- &lt;button @click=&quot;fun1&quot;&gt;add&lt;/button&gt;&#10;          &lt;button @click=&quot;fun2&quot;&gt;sub&lt;/button&gt; --&gt;&#10;          &lt;button @click=&quot;fun1(num)&quot;&gt;add&lt;/button&gt;&#10;          &lt;button @click=&quot;fun2(num)&quot;&gt;sub&lt;/button&gt;&#10;          &lt;!-- &lt;button @click=&quot;fun3&quot;&gt;addOdd&lt;/button&gt; --&gt;&#10;          &lt;button @click=&quot;fun3(num)&quot;&gt;addOdd&lt;/button&gt;&#10;          &lt;!-- &lt;p&gt;{{$store.state.sum}}&lt;/p&gt; --&gt;&#10;          &lt;p&gt;{{sum}}&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    import {mapMutations,mapActions,mapState} from &quot;vuex&quot;&#10;    export default {&#10;        name:&quot;Calculate&quot;,&#10;        data(){&#10;            return {&#10;                num:0,&#10;            }&#10;        },&#10;        methods:{&#10;            // fun1(){         &#10;            //     this.$store.commit(&quot;ADD&quot;,this.num);&#10;            // },&#10;            // fun2(){&#10;            //     this.$store.commit(&quot;SUB&quot;,this.num);&#10;            // },&#10;            fun3(){&#10;                this.$store.dispatch(&quot;CalItem/addOdd&quot;,this.num);&#10;            },&#10;            ...mapMutations({fun1:&quot;CalItem/ADD&quot;,fun2:&quot;CalItem/SUB&quot;}),&#10;            ...mapActions({fun3:&quot;CalItem/addOdd&quot;})&#10;        },&#10;        computed:{&#10;            ...mapState(&quot;CalItem&quot;,[&quot;sum&quot;]),&#10;        }&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;&#10;    &lt;/style&gt;&#10;&#10;&#10;    //SearchUsers.vue&#10;    &lt;template&gt;&#10;      &lt;div id=&quot;searchUsers&quot;&gt;&#10;          &lt;input type=&quot;text&quot; v-model=&quot;userName&quot; @keyup.enter=&quot;searchUsers&quot;/&gt;&#10;          &lt;button @click=&quot;searchUsers&quot;&gt;search&lt;/button&gt;&#10;          &lt;p v-if=&quot;errmsg&quot;&gt;{{errmsg}}&lt;/p&gt;&#10;          &lt;div id=&quot;userList&quot; v-for=&quot;user in result&quot; :key=&quot;user.login&quot;&gt;&#10;              &lt;a :href=&quot;user.html_url&quot;&gt;&#10;                &lt;img :src=&quot;user.avatar_url&quot;/&gt;&#10;                &lt;p v-text=&quot;user.login&quot;&gt;&lt;/p&gt;&#10;              &lt;/a&gt;&#10;          &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    import {mapState} from &quot;vuex&quot;&#10;    export default {&#10;        name:&quot;SearchUsers&quot;,&#10;        data(){&#10;            return {&#10;                    userName:&quot;&quot;,&#10;                &#10;            }&#10;        },&#10;        methods:{&#10;            searchUsers(){&#10;                this.$store.dispatch(&quot;SearItem/searchUsers&quot;,this.userName);&#10;            },&#10;            // showMsg(){&#10;            //     console.log(this.$store.state.result);&#10;            // }&#10;        },&#10;        computed:{&#10;            ...mapState(&quot;SearItem&quot;,[&quot;result&quot;,&quot;errmsg&quot;])&#10;        }&#10;&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;      &#10;        img{&#10;            width:100%;&#10;            height:80%;&#10;        }&#10;        #userList{&#10;            width:200px;&#10;            height:300px;&#10;            border:1px solid silver;&#10;            float:left;&#10;            margin:20px;&#10;        }&#10;    &lt;/style&gt;">
  </outline>
  <outline text="路由的query参数" _note="    &lt;template&gt;&#10;      &lt;div &gt;&#10;          &lt;p&gt;CHILDREN2&lt;/p&gt;&#10;          &lt;ul&gt;&#10;              &lt;li v-for=&quot;item in userList&quot; :key=&quot;item.id&quot;&gt;&#10;                  &lt;!-- &lt;router-link :to=&quot;`/component2/children2/userlist?id=${item.id}&amp;name=${item.name}`&quot; &#10;                  active-class=&quot;highlight&quot;&gt;{{item.name}}&lt;/router-link&gt; --&gt;&#10;                  &lt;router-link :to=&quot;{&#10;                      path:`/component2/children2/userlist`,&#10;                      query:{&#10;                          id:item.id,&#10;                          name:item.name&#10;                      }&#10;                  }&quot;&gt;{{item.name}}&lt;/router-link&gt;&#10;              &lt;/li&gt;&#10;          &lt;/ul&gt;&#10;          &lt;router-view&gt;&lt;/router-view&gt;&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script&gt;&#10;    import {nanoid} from &quot;nanoid&quot;&#10;    export default {&#10;        name:&quot;CHILDREN2&quot;,&#10;        data(){&#10;            return {&#10;                userList:[&#10;                {id:nanoid(),name:&quot;simon&quot;},&#10;                {id:nanoid(),name:&quot;zoe&quot;},&#10;                {id:nanoid(),name:&quot;chandler&quot;},&#10;                {id:nanoid(),name:&quot;emily&quot;}&#10;            ]}&#10;        }&#10;    }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style scoped&gt;&#10;        ul{&#10;            list-style: none;&#10;        }&#10;        highlight{&#10;            background-color:#ddd;&#10;        }&#10;    &lt;/style&gt;&#10;&#10;&#10;    //userlist.vue&#10;    &lt;template&gt;&#10;      &lt;div id=&quot;userList&quot;&gt;&#10;          {{$route.query.id}}&#10;          {{$route.query.name}}&#10;      &lt;/div&gt;&#10;    &lt;/template&gt;">
  </outline>
  <outline text="路由的params参数" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220163055702.png)&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220163130843.png)&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220163151419.png)&#10;&#10;params参数&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220164152692.png)">
  </outline>
  <outline text="路由的props属性" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220170926977.png)&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220170948010.png)">
  </outline>
  <outline text="router-link的replace属性" _note="&gt; router-link&#10;&gt; 默认情况下是push,可前进后退，replace替换为当前记录，不可前进后退&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220190503341.png)&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220190521325.png)">
  </outline>
  <outline text="缓存路由组件" _note="     &lt;keep-alive include=&quot;Children3&quot;&gt;&#10;            &lt;router-view&gt;&lt;/router-view&gt;&#10;          &lt;/keep-alive&gt;&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220190655778.png)">
  </outline>
  <outline text="组件的两个生命周期钩子" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220193404881.png)">
  </outline>
  <outline text="路由守卫" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220200530045.png)&#10;&#10;优化&#10;&#10;标记需要鉴权的路由组件 meta:{isAuth:true}&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220201333222.png)&#10;&#10;    //全局前置路由守卫&#10;    router.beforeEach((to, from, next) =&gt; {&#10;        console.log(to, from, next)&#10;            //判断是否鉴权&#10;        if (to.meta.isAuth) {&#10;            if (localStorage.getItem(&quot;userName&quot;) === &quot;chandler&quot;) {&#10;                next()&#10;            } else {&#10;                alert(&quot;请登录&quot;)&#10;            }&#10;        } else {&#10;            next();&#10;        }&#10;&#10;    })&#10;&#10;全局后置路由&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220203719118.png)&#10;&#10;独享路由&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220203759367.png)&#10;&#10;组件内路由守卫&#10;&#10;![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220205708958.png)">
  </outline>
  <outline text="history模式" _note="![](C:\Users\Simon%20Kerola\AppData\Roaming\Typora\typora-user-images\image-20211220210738071.png)">
  </outline>
</outline>
  </body>
</opml>
